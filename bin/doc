#!/usr/bin/env bash

## \brief Documentation for your shell scripts!

if [ $# -eq 0 ]; then
  doc usage "$0"
  exit 1
fi

data_dir="/tmp/shellm_doc"
mkdir -p "${data_dir}" &>/dev/null

resolve_0() {
  if [ ! -f "$1" ]; then
    command -v "$1" 2>/dev/null
  else
    echo "$1"
  fi
}

cache_get_key() {
  shasum "$1" | cut -d' ' -f1
}

cache_has() {
  [ -f "${data_dir}/$1" ]
}

cache_set_help() {
  shellman -thelptext "$1" -o "${data_dir}/$2"
}

cache_set_usage() {
  shellman -tusagetext "$1" -o "${data_dir}/$2"
}

cache_set() {
  cache_set_"${type}" "$1" "$2"
}

cache_get() {
  cat "${data_dir}/$1"
}

cache_clear() {
  rm "${data_dir}/$1"
}

caches_clear() {
  local arg
  local cache_key
  if [ $# -eq 0 ]; then
    rm "${data_dir}"/* &>/dev/null
  else
    for arg; do
      arg="$(resolve_0 "${arg}")" || continue
      cache_key="$(cache_get_key "${arg}")"
      cache_clear "usage-${cache_key}"
      cache_clear "help-${cache_key}"
    done
  fi
}

get() {
  local type="$1"
  local script
  local cache_key

  if ! script="$(resolve_0 "$2")"; then
    echo "doc: no such file: $2" >&2
    return 1
  fi

  cache_key="${type}-$(cache_get_key "${script}")"
  if ! cache_has "${cache_key}"; then
    cache_set "${script}" "${cache_key}" || return 1
  fi
  cache_get "${cache_key}"
}

caches_set() {
  local arg
  local cache_key
  local scripts
  local basenames
  local shasums

  for arg; do
    arg="$(resolve_0 "${arg}")" || continue
    scripts+=(${arg})
    basenames+=($(basename "${arg}"))
    shasums+=($(cache_get_key "${arg}"))
  done

  shellman "${scripts[@]}" -t helptext -o "${data_dir}/_help-{filename}"
  shellman "${scripts[@]}" -t usagetext -o "${data_dir}/_usage-{filename}"

  i=0
  for arg in "${basenames[@]}"; do
    ln -s "${data_dir}/_help-${arg}" "${data_dir}/help-${shasums[$i]}"
    ln -s "${data_dir}/_usage-${arg}" "${data_dir}/usage-${shasums[$i]}"
    (( i++ ))
  done
}

main() {
  case "$1" in
    ## \option -h, --help
    ## Print this help and exit.
    -h|--help) doc "$0" ;;

    ## \option -c, --cache SCRIPT...
    ## Cache the help and usage text for the given scripts.
    -c|--cache) shift; caches_set "$@" ;;

    ## \option -d, --delete-cache [SCRIPT...]
    ## Clear the cache for the given scripts, or clear all the cache.
    -d|--delete-cache) shift; caches_clear "$@" ;;

    usage) get usage "$2" ;;
    help) get help "$2" ;;
    *) get help "$1" ;;
  esac
}

## \usage doc [help] SCRIPT
## \usage doc usage SCRIPT
## \usage doc -c SCRIPT...
## \usage doc -d [SCRIPT...]
main "$@"
